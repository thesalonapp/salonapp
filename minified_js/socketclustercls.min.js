class SCClient{static CONNECTED=1;static DISCONNECTED=2;static CONNECTION_ABORT=3;constructor(){if(!this.SOCKET){let t=TSITE_SC_PROTOCOL;this.SOCKET=socketClusterClient.create({hostname:TSITE_SC_HOST,autoConnect:!0,connectTimeout:1e4,ackTimeout:1e4,autoReconnect:!0,autoReconnectOptions:{initialDelay:2e3,randomness:2e3,multiplier:0,maxDelay:15e3},path:TSITE_HOST_SC_PATH,port:TSITE_HOST_SC_PORT,secure:!!t.startsWith("https://")})}}addEventListener(t){if(null==t)return!1;(async()=>{for await(let e of this.SOCKET.listener("connect"))console.log("Connected to the server"),t(SCClient.CONNECTED,e)})(),(async()=>{for await(let e of this.SOCKET.listener("connectAbort"))console.log("connectAbort from the server"),console.log(e),t(SCClient.CONNECTION_ABORT,e)})(),(async()=>{for await(let e of this.SOCKET.listener("disconnect"))console.log("Disconnected from the server"),console.log(e),t(SCClient.DISCONNECTED,e)})()}subscribe(t,e){(async()=>{let s=this.SOCKET.subscribe(t);for await(let n of(await s.listener("subscribe").once(),s)){var i=n;this.isValidJson(n)&&(i=this.makeJson(n)),e&&e(i)}})()}publish(t,e){return this.SOCKET.transmitPublish(t,e),!0}isValidJson(t){try{return JSON.parse(t),!0}catch(e){return!1}}makeJson(t){if(!this.isValidJson(t))return t;var e=JSON.parse(t);return this.makeJson(e)}}let SOCKET_OBJ=new SCClient;